hbVersion: "1.0"
type: model
alias: bq_job_metadata_${ALIAS_BQ_PROJECT_ID}
name: BigQuery Job Metadata for ${BQ_PROJECT_ID}
resourceMetadata:
  labels:
  - ${BQ_PROJECT_ID}
description: Metadata about the jobs run in the provided BigQuery project, including compute cost, job duration, tables, and user emails.
source:
  connectionName: BigQuery OAuth ${BQ_PROJECT_ID}
  sql: |
    SELECT
        creation_time,
        project_id,
        user_email,
        job_id,
        transaction_id,
        job_type,
        statement_type,
        start_time,
        end_time,
        state,
        (total_slot_ms / (1000 * 60 * 60)) as total_slot_hours,
        total_bytes_processed,
        total_bytes_billed,
        cache_hit,
        ARRAY(
            SELECT
                project_id || '.' || dataset_id || '.' || table_id
            FROM
                UNNEST(referenced_tables)
        ) AS referenced_tables,
        (error_result is not NULL) as is_error,
        ((total_bytes_billed / POW(1024, 4)) * 6.25) as on_demand_compute_cost
    FROM
        `region-us`.INFORMATION_SCHEMA.JOBS
cols:
  - id: creation_time
    type: datetime
    physicalName: creation_time
    name: Timestamp
    primaryDate: true
    description: Time the job was created.
    aggregationOptions:
      minGranularity: second
      maxGranularity: year
  - id: project_id
    type: attribute
    physicalName: project_id
    name: Project ID
    description: The ID of the project.
  - id: user_email
    type: attribute
    physicalName: user_email
    name: User email
    description: Email address or service account of the user who ran the job.
  - id: job_id
    type: attribute
    physicalName: job_id
    name: Job ID
    description: The ID of the job. For example, bquxjob_1234.
    primaryKey: true
  - id: transaction_id
    type: attribute
    physicalName: transaction_id
    name: Transaction ID
    description: ID of the transaction in which this job ran, if any.
  - id: job_type
    type: attribute
    physicalName: job_type
    name: Job type
    description: The type of the job. Can be QUERY, LOAD, EXTRACT, COPY, or NULL. A NULL value indicates an internal job, such as a script job statement evaluation or a materialized view refresh.
  - id: statement_type
    type: attribute
    physicalName: statement_type
    name: Statement type
    description: The type of query statement. For example, DELETE, INSERT, SCRIPT, SELECT, or UPDATE. See [QueryStatementType](https://cloud.google.com/bigquery/docs/reference/auditlogs/rest/Shared.Types/BigQueryAuditMetadata.QueryStatementType) for list of valid values.
  - id: start_time
    type: datetime
    physicalName: start_time
    name: Start time
    primaryDate: false
    description: Start time of this job.
    aggregationOptions:
      minGranularity: second
      maxGranularity: year
  - id: end_time
    type: datetime
    physicalName: end_time
    name: End time
    primaryDate: false
    description: End time of this job.
    aggregationOptions:
      minGranularity: second
      maxGranularity: year
  - id: state
    type: attribute
    physicalName: state
    name: State
    description: Running state of the job. Valid states include PENDING, RUNNING, and DONE.
  - id: cache_hit
    type: attribute
    physicalName: cache_hit
    name: Cache hit
    description: Whether the query results of this job were from a cache. If you have a multi-query statement job, cache_hit for your parent query is NULL.
  - id: referenced_tables
    type: attribute
    physicalName: referenced_tables
    name: Referenced tables
    description: Array of tables referenced by the job. Only populated for query jobs.
  - id: is_error
    type: attribute
    physicalName: is_error
    name: Is error
    description: Whether the query resulted in an error.
  - id: total_slot_hours
    type: measure
    name: Total slot hours
    description: Sum of the slot hours for the jobs over their entire durations.
    aggregate: sum
    physicalName: total_slot_hours
  - id: total_bytes_billed
    type: measure
    name: Total bytes billed
    description: |-
      If the project is configured to use on-demand pricing, then this field contains the total bytes billed for the job. If the project is configured to use flat-rate pricing, then you are not billed for bytes and this field is informational only.
      Note: This column's values are empty for queries that read from tables with row-level access policies.
    aggregate: sum
    physicalName: total_bytes_billed
  - id: total_bytes_processed
    type: measure
    name: Total bytes processed
    description: Total bytes processed by jobs.
    aggregate: sum
    physicalName: total_bytes_processed
  - id: total_compute_cost
    type: measure
    name: Total compute cost
    description: The total cost (in dollars) of compute based on the total bytes billed.
    formattingOptions:
      fixedDecimals: 2
      formatAsDollars: true
    aggregate: sum
    physicalName: on_demand_compute_cost
  - id: count_distinct_user_email
    type: measure
    name: Distinct user emails
    aggregate: count_distinct
    physicalName: user_email
  - id: total_gigabytes_processed
    type: measure
    name: Total gigabytes processed
    description: Total gigabytes processed by jobs.
    formattingOptions:
      fixedDecimals: 2
    sql: "{{ total_bytes_processed }} * POWER(10, -9)"
  - id: total_gigabytes_billed
    type: measure
    name: Total gigabytes billed
    description: |-
      If the project is configured to use on-demand pricing, then this field contains the total gigabytes billed for the job. If the project is configured to use flat-rate pricing, then you are not billed for bytes and this field is informational only.
      Note: This column's values are empty for queries that read from tables with row-level access policies.
    formattingOptions:
      fixedDecimals: 2
    sql: "{{ total_bytes_billed }} * POWER(10, -9)"
  - id: avg_job_duration
    type: measure
    name: Avg job duration
    description: The average duration of a query in seconds.
    formattingOptions:
      fixedDecimals: 3
    sql: avg(date_diff({{end_time }}, {{start_time }}, second))
